{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "a4fead31-da18-49a4-b0bb-a3b7f7498d15",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import pickle\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.metrics import r2_score, mean_squared_error\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# Mealpy imports\n",
    "from mealpy.swarm_based.WOA import OriginalWOA\n",
    "from mealpy.utils.space import IntegerVar, FloatVar\n",
    "from mealpy.utils.problem import Problem\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "e2010dba-74c0-4b0a-a67b-2accf957ee38",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# === Load Data ===\n",
    "df = pd.read_excel(\"C:/Users/User/Desktop/Python/pile.xlsx\", sheet_name='Sheet1')\n",
    "df.columns = ['g1', 'phi1', 'g2', 'C2', 'D']\n",
    "\n",
    "# Fill missing values\n",
    "df.fillna(0, inplace=True)\n",
    "\n",
    "# === Input and Output Variables ===\n",
    "input_vars = ['g1', 'phi1', 'g2', 'C2']\n",
    "output_var = 'D'\n",
    "\n",
    "# Extract features and target\n",
    "X = df[input_vars]\n",
    "y = df[output_var]\n",
    "\n",
    "# Split dataset\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "cbec2b9d-6781-4c19-81bc-9c36f72e7bca",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Objective function\n",
    "def objective_function(params):\n",
    "    n_estimators, max_depth, min_samples_split, min_samples_leaf = params\n",
    "\n",
    "    n_estimators = int(round(n_estimators))\n",
    "    max_depth = int(round(max_depth))\n",
    "\n",
    "    min_samples_split = float(min_samples_split)\n",
    "    if not (0.0 < min_samples_split <= 1.0):\n",
    "        min_samples_split = 0.1\n",
    "\n",
    "    min_samples_leaf = int(round(min_samples_leaf))\n",
    "    min_samples_leaf = max(1, min_samples_leaf)\n",
    "\n",
    "    model = RandomForestRegressor(\n",
    "        n_estimators=n_estimators,\n",
    "        max_depth=max_depth,\n",
    "        min_samples_split=min_samples_split,\n",
    "        min_samples_leaf=min_samples_leaf,\n",
    "        random_state=42\n",
    "    )\n",
    "    model.fit(X_train, y_train)\n",
    "    preds = model.predict(X_test)\n",
    "    return np.sqrt(mean_squared_error(y_test, preds))\n",
    "\n",
    "# Hyperparameter space\n",
    "bounds = [\n",
    "    IntegerVar(50, 300),   # n_estimators\n",
    "    IntegerVar(2, 20),     # max_depth\n",
    "    FloatVar(0.01, 1.0),   # min_samples_split\n",
    "    IntegerVar(1, 20)      # min_samples_leaf\n",
    "]\n",
    "\n",
    "problem = Problem(\n",
    "    obj_func=objective_function,\n",
    "    bounds=bounds,\n",
    "    minmax=\"min\",\n",
    "    verbose=True\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "ece009ac-468c-4e71-a7b4-9e04e4f84e4b",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025/07/22 06:13:39 PM, INFO, mealpy.swarm_based.WOA.OriginalWOA: OriginalWOA(epoch=10, pop_size=20)\n",
      "2025/07/22 06:13:43 PM, INFO, mealpy.swarm_based.WOA.OriginalWOA: >>>Problem: P, Epoch: 1, Current best: 0.047759575000045996, Global best: 0.047759575000045996, Runtime: 1.97702 seconds\n",
      "2025/07/22 06:13:45 PM, INFO, mealpy.swarm_based.WOA.OriginalWOA: >>>Problem: P, Epoch: 2, Current best: 0.044528532602096084, Global best: 0.044528532602096084, Runtime: 1.92041 seconds\n",
      "2025/07/22 06:13:46 PM, INFO, mealpy.swarm_based.WOA.OriginalWOA: >>>Problem: P, Epoch: 3, Current best: 0.044251780989628675, Global best: 0.044251780989628675, Runtime: 1.46055 seconds\n",
      "2025/07/22 06:13:48 PM, INFO, mealpy.swarm_based.WOA.OriginalWOA: >>>Problem: P, Epoch: 4, Current best: 0.042682836697320266, Global best: 0.042682836697320266, Runtime: 1.40152 seconds\n",
      "2025/07/22 06:13:49 PM, INFO, mealpy.swarm_based.WOA.OriginalWOA: >>>Problem: P, Epoch: 5, Current best: 0.042014611896596096, Global best: 0.042014611896596096, Runtime: 1.53468 seconds\n",
      "2025/07/22 06:13:51 PM, INFO, mealpy.swarm_based.WOA.OriginalWOA: >>>Problem: P, Epoch: 6, Current best: 0.042014611896596096, Global best: 0.042014611896596096, Runtime: 1.71512 seconds\n",
      "2025/07/22 06:13:53 PM, INFO, mealpy.swarm_based.WOA.OriginalWOA: >>>Problem: P, Epoch: 7, Current best: 0.042014611896596096, Global best: 0.042014611896596096, Runtime: 1.71881 seconds\n",
      "2025/07/22 06:13:54 PM, INFO, mealpy.swarm_based.WOA.OriginalWOA: >>>Problem: P, Epoch: 8, Current best: 0.042014611896596096, Global best: 0.042014611896596096, Runtime: 1.72951 seconds\n",
      "2025/07/22 06:13:56 PM, INFO, mealpy.swarm_based.WOA.OriginalWOA: >>>Problem: P, Epoch: 9, Current best: 0.042014611896596096, Global best: 0.042014611896596096, Runtime: 1.74930 seconds\n",
      "2025/07/22 06:13:58 PM, INFO, mealpy.swarm_based.WOA.OriginalWOA: >>>Problem: P, Epoch: 10, Current best: 0.042014611896596096, Global best: 0.042014611896596096, Runtime: 1.69156 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Inspecting object of type: <class 'mealpy.utils.agent.Agent'>\n",
      "Found attribute 'solution': [1.05387819e+02 1.02900173e+01 1.00000000e-02 5.93335994e-01]\n",
      "Inspecting object of type: <class 'numpy.ndarray'>\n",
      "Inspecting object of type: <class 'numpy.float64'>\n",
      "Inspecting object of type: <class 'numpy.float64'>\n",
      "Inspecting object of type: <class 'numpy.float64'>\n",
      "Inspecting object of type: <class 'numpy.float64'>\n",
      "Extracted best_params: [105.38781869099722, 10.290017311448926, 0.01, 0.5933359942381675]\n",
      "R2 (Train): 0.9966, RMSE (Train): 0.0219\n",
      "R2 (Test): 0.9879, RMSE (Test): 0.0420\n"
     ]
    }
   ],
   "source": [
    "# Run WOA optimizer\n",
    "optimizer = OriginalWOA(epoch=10, pop_size=20)\n",
    "result = optimizer.solve(problem)\n",
    "\n",
    "# === STRICT PARAMETER EXTRACTION FUNCTION ===\n",
    "def get_numeric_params(agent):\n",
    "    \"\"\"\n",
    "    Recursively find and extract numeric vector from Agent object.\n",
    "    \"\"\"\n",
    "    print(f\"Inspecting object of type: {type(agent)}\")\n",
    "    # If already numeric or list/tuple of numerics\n",
    "    if isinstance(agent, (float, int)):\n",
    "        return agent\n",
    "    if isinstance(agent, (list, tuple, np.ndarray)):\n",
    "        return [get_numeric_params(x) for x in agent]\n",
    "\n",
    "    # Try common attribute names for position vectors\n",
    "    for attr_name in ['solution', 'position', 'best_solution', 'best_position', 'x']:\n",
    "        if hasattr(agent, attr_name):\n",
    "            val = getattr(agent, attr_name)\n",
    "            print(f\"Found attribute '{attr_name}': {val}\")\n",
    "            return get_numeric_params(val)\n",
    "\n",
    "    raise TypeError(f\"Cannot extract numeric parameters from object of type {type(agent)}\")\n",
    "\n",
    "best_params = get_numeric_params(result)\n",
    "\n",
    "# Flatten nested lists if needed\n",
    "def flatten(lst):\n",
    "    for el in lst:\n",
    "        if isinstance(el, (list, tuple, np.ndarray)):\n",
    "            yield from flatten(el)\n",
    "        else:\n",
    "            yield el\n",
    "\n",
    "if isinstance(best_params, list):\n",
    "    best_params = list(flatten(best_params))\n",
    "\n",
    "print(\"Extracted best_params:\", best_params)\n",
    "\n",
    "# Cast safely\n",
    "n_estimators = int(round(best_params[0]))\n",
    "max_depth = int(round(best_params[1]))\n",
    "min_samples_split = float(best_params[2])\n",
    "if not (0.0 < min_samples_split <= 1.0):\n",
    "    min_samples_split = 0.1\n",
    "min_samples_leaf = int(round(best_params[3]))\n",
    "min_samples_leaf = max(1, min_samples_leaf)\n",
    "\n",
    "final_model = RandomForestRegressor(\n",
    "    n_estimators=n_estimators,\n",
    "    max_depth=max_depth,\n",
    "    min_samples_split=min_samples_split,\n",
    "    min_samples_leaf=min_samples_leaf,\n",
    "    random_state=42\n",
    ")\n",
    "final_model.fit(X_train, y_train)\n",
    "\n",
    "y_train_pred = final_model.predict(X_train)\n",
    "y_test_pred = final_model.predict(X_test)\n",
    "\n",
    "print(f\"R2 (Train): {r2_score(y_train, y_train_pred):.4f}, RMSE (Train): {np.sqrt(mean_squared_error(y_train, y_train_pred)):.4f}\")\n",
    "print(f\"R2 (Test): {r2_score(y_test, y_test_pred):.4f}, RMSE (Test): {np.sqrt(mean_squared_error(y_test, y_test_pred)):.4f}\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fa2a1edc-13de-4478-95e0-292449839028",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e9274faa-d70f-4d61-8bb9-49678d3730ea",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "16f290e5-4f7d-463f-8f98-90df2ab07be1",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "History found.\n",
      "Number of epochs recorded: 10\n",
      "Epoch 1 best solution: id: 4295, target: Objectives: [0.04775958], Fitness: 0.047759575000045996, solution: [1.36008985e+02 8.87093483e+00 1.58582447e-02 1.05418094e+00]\n",
      "Epoch 2 best solution: id: 4337, target: Objectives: [0.04452853], Fitness: 0.044528532602096084, solution: [8.47067303e+01 8.46982640e+00 1.00000000e-02 5.00000000e-01]\n",
      "Epoch 3 best solution: id: 4379, target: Objectives: [0.04425178], Fitness: 0.044251780989628675, solution: [8.49636869e+01 8.89506318e+00 1.00000000e-02 5.44966660e-01]\n",
      "Epoch 4 best solution: id: 4421, target: Objectives: [0.04268284], Fitness: 0.042682836697320266, solution: [1.02463649e+02 1.00438463e+01 1.00000000e-02 5.87035088e-01]\n",
      "Epoch 5 best solution: id: 4463, target: Objectives: [0.04201461], Fitness: 0.042014611896596096, solution: [1.05387819e+02 1.02900173e+01 1.00000000e-02 5.93335994e-01]\n",
      "Epoch 6 best solution: id: 4505, target: Objectives: [0.04201461], Fitness: 0.042014611896596096, solution: [1.05387819e+02 1.02900173e+01 1.00000000e-02 5.93335994e-01]\n",
      "Epoch 7 best solution: id: 4547, target: Objectives: [0.04201461], Fitness: 0.042014611896596096, solution: [1.05387819e+02 1.02900173e+01 1.00000000e-02 5.93335994e-01]\n",
      "Epoch 8 best solution: id: 4589, target: Objectives: [0.04201461], Fitness: 0.042014611896596096, solution: [1.05387819e+02 1.02900173e+01 1.00000000e-02 5.93335994e-01]\n",
      "Epoch 9 best solution: id: 4631, target: Objectives: [0.04201461], Fitness: 0.042014611896596096, solution: [1.05387819e+02 1.02900173e+01 1.00000000e-02 5.93335994e-01]\n",
      "Epoch 10 best solution: id: 4673, target: Objectives: [0.04201461], Fitness: 0.042014611896596096, solution: [1.05387819e+02 1.02900173e+01 1.00000000e-02 5.93335994e-01]\n",
      "Extracted y_values: [0.047759575000045996, 0.044528532602096084, 0.044251780989628675, 0.042682836697320266, 0.042014611896596096, 0.042014611896596096, 0.042014611896596096, 0.042014611896596096, 0.042014611896596096, 0.042014611896596096]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import re\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "if hasattr(optimizer, 'history') and hasattr(optimizer.history, 'list_global_best'):\n",
    "    print(\"History found.\")\n",
    "    print(\"Number of epochs recorded:\", len(optimizer.history.list_global_best))\n",
    "    \n",
    "    fitness_pattern = re.compile(r'Fitness:\\s*([0-9.eE+-]+)')\n",
    "    y_values = []\n",
    "    \n",
    "    for idx, item in enumerate(optimizer.history.list_global_best):\n",
    "        print(f\"Epoch {idx+1} best solution:\", item)\n",
    "        \n",
    "        # If item has fitness attribute directly (best)\n",
    "        if hasattr(item, 'fitness'):\n",
    "            y_values.append(item.fitness)\n",
    "        \n",
    "        # If numeric type\n",
    "        elif isinstance(item, (float, int)):\n",
    "            y_values.append(item)\n",
    "        \n",
    "        else:\n",
    "            # Convert item to string and try to extract fitness with regex\n",
    "            item_str = str(item)\n",
    "            match = fitness_pattern.search(item_str)\n",
    "            if match:\n",
    "                fitness_val = float(match.group(1))\n",
    "                y_values.append(fitness_val)\n",
    "            else:\n",
    "                print(f\"Skipping unrecognized history item: {item_str}\")\n",
    "\n",
    "    print(\"Extracted y_values:\", y_values)\n",
    "    \n",
    "    if len(y_values) == 0:\n",
    "        print(\"No numeric data extracted from history. No plot will be shown.\")\n",
    "    else:\n",
    "        plt.figure(figsize=(10, 6))\n",
    "        plt.plot(range(1, len(y_values) + 1), y_values, marker='o', color='blue')\n",
    "        plt.xlabel(\"Epoch\")\n",
    "        plt.ylabel(\"Loss (RMSE)\")\n",
    "        plt.title(\"Convergence Curve - Loss vs Epoch (WOA)\")\n",
    "        plt.grid(True)\n",
    "        plt.tight_layout()\n",
    "        plt.show()\n",
    "else:\n",
    "    print(\"No convergence history found in optimizer.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "44eaae47-6265-45a9-a435-b09c29378a63",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ef7bdc2a-cac6-41ab-9c60-c15907128472",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import pickle\n",
    "import tkinter as tk\n",
    "from tkinter import messagebox, filedialog\n",
    "\n",
    "# === Load the trained model ===\n",
    "with open(\"RandomForest_HHO_model.pkl\", \"rb\") as file:\n",
    "    model_loaded = pickle.load(file)\n",
    "\n",
    "# === GUI Setup ===\n",
    "root = tk.Tk()\n",
    "root.title(\"Embedment Depth Prediction using Hybrid RF-HHO Model\")\n",
    "root.configure(bg='#e1f5fe')\n",
    "root.geometry(\"750x500\")\n",
    "\n",
    "title = tk.Label(root, text=\"Prediction of Embedment Depth of Sheet Pile (D)\",\n",
    "                 font=('Helvetica', 16, 'bold'), bg='#e1f5fe', fg='#01579b')\n",
    "title.pack(pady=20)\n",
    "\n",
    "# Input Frame\n",
    "input_frame = tk.Frame(root, bg='#e1f5fe')\n",
    "input_frame.pack(pady=10)\n",
    "\n",
    "# Display names for GUI, actual feature names for model\n",
    "display_labels = {\n",
    "    'gamma1': 'γ₁ (kN/m³)',\n",
    "    'phi1': 'φ₁ (°)',\n",
    "    'gamma2': 'γ₂ (kN/m³)',\n",
    "    'C2': 'C₂ (kPa)'\n",
    "}\n",
    "\n",
    "# Mapping GUI variable names to model input names\n",
    "feature_mapping = {\n",
    "    'gamma1': 'g1',\n",
    "    'phi1': 'phi1',\n",
    "    'gamma2': 'g2',\n",
    "    'C2': 'C2'\n",
    "}\n",
    "\n",
    "entries = {}\n",
    "\n",
    "for i, (var, label_text) in enumerate(display_labels.items()):\n",
    "    label = tk.Label(input_frame, text=label_text, font=('Helvetica', 12), bg='#e1f5fe')\n",
    "    label.grid(row=i, column=0, sticky=\"w\", padx=10, pady=5)\n",
    "    entry = tk.Entry(input_frame, width=25, font=('Helvetica', 12))\n",
    "    entry.grid(row=i, column=1, padx=10, pady=5)\n",
    "    entries[var] = entry\n",
    "\n",
    "# Output Frame\n",
    "output_frame = tk.Frame(root, bg='#e1f5fe')\n",
    "output_frame.pack(pady=20)\n",
    "\n",
    "output_label = tk.Label(output_frame, text=\"Predicted Depth (D):\", font=('Helvetica', 13, 'bold'), bg='#e1f5fe')\n",
    "output_label.grid(row=0, column=0, padx=10)\n",
    "\n",
    "output_value = tk.Label(output_frame, text=\"---\", font=('Helvetica', 13), bg='white', width=10, relief='sunken')\n",
    "output_value.grid(row=0, column=1, padx=10)\n",
    "\n",
    "# Store latest prediction\n",
    "latest_prediction = [None]\n",
    "\n",
    "# === Functions ===\n",
    "def predict():\n",
    "    try:\n",
    "        input_values = {feature_mapping[var]: float(entries[var].get()) for var in entries}\n",
    "    except ValueError:\n",
    "        messagebox.showerror(\"Invalid Input\", \"Please enter valid numeric values.\")\n",
    "        return\n",
    "\n",
    "    df_input = pd.DataFrame([input_values])\n",
    "    prediction = model_loaded.predict(df_input)\n",
    "    pred_val = round(prediction[0], 3)\n",
    "    latest_prediction[0] = (input_values, pred_val)\n",
    "    output_value.config(text=str(pred_val))\n",
    "\n",
    "def clear():\n",
    "    for entry in entries.values():\n",
    "        entry.delete(0, tk.END)\n",
    "    output_value.config(text=\"---\")\n",
    "    latest_prediction[0] = None\n",
    "\n",
    "def export_csv():\n",
    "    if latest_prediction[0] is None:\n",
    "        messagebox.showwarning(\"No Data\", \"Please make a prediction first.\")\n",
    "        return\n",
    "\n",
    "    input_values, pred_val = latest_prediction[0]\n",
    "    df = pd.DataFrame([list(input_values.values()) + [pred_val]],\n",
    "                      columns=list(input_values.keys()) + ['D'])\n",
    "\n",
    "    file_path = filedialog.asksaveasfilename(defaultextension=\".csv\", filetypes=[(\"CSV files\", \"*.csv\")])\n",
    "    if file_path:\n",
    "        df.to_csv(file_path, index=False)\n",
    "        messagebox.showinfo(\"Export Successful\", f\"Data saved to {file_path}\")\n",
    "\n",
    "# === Buttons ===\n",
    "btn_frame = tk.Frame(root, bg='#e1f5fe')\n",
    "btn_frame.pack(pady=10)\n",
    "\n",
    "def style_btn(txt, cmd):\n",
    "    return tk.Button(btn_frame, text=txt, command=cmd,\n",
    "                     font=('Helvetica', 12), bg='#ffffff', fg='#01579b',\n",
    "                     activebackground='#81d4fa', activeforeground='black',\n",
    "                     padx=15, pady=5, relief='raised', bd=2)\n",
    "\n",
    "predict_btn = style_btn(\"Predict\", predict)\n",
    "clear_btn = style_btn(\"Clear\", clear)\n",
    "export_btn = style_btn(\"Export CSV\", export_csv)\n",
    "\n",
    "predict_btn.grid(row=0, column=0, padx=10)\n",
    "clear_btn.grid(row=0, column=1, padx=10)\n",
    "export_btn.grid(row=0, column=2, padx=10)\n",
    "\n",
    "root.mainloop()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fe7e77f0-c95c-41c6-8b71-c65c6cdc3f42",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-07-24 09:50:52.204 WARNING streamlit.runtime.scriptrunner_utils.script_run_context: Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-24 09:50:52.205 WARNING streamlit.runtime.scriptrunner_utils.script_run_context: Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-24 09:50:52.274 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run C:\\ProgramData\\anaconda3\\Lib\\site-packages\\ipykernel_launcher.py [ARGUMENTS]\n",
      "2025-07-24 09:50:52.274 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-24 09:50:52.275 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-24 09:50:52.276 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-24 09:50:52.277 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-24 09:50:52.278 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-24 09:50:52.278 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-24 09:50:52.279 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-24 09:50:52.279 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-24 09:50:52.280 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-24 09:50:52.281 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-24 09:50:52.281 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-24 09:50:52.282 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-24 09:50:52.282 Session state does not function when running a script without `streamlit run`\n",
      "2025-07-24 09:50:52.283 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-24 09:50:52.283 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-24 09:50:52.284 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-24 09:50:52.285 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-24 09:50:52.285 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-24 09:50:52.286 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-24 09:50:52.286 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-24 09:50:52.287 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-24 09:50:52.287 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-24 09:50:52.288 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-24 09:50:52.289 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-24 09:50:52.289 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-24 09:50:52.290 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-24 09:50:52.290 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-24 09:50:52.291 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-24 09:50:52.291 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-24 09:50:52.292 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-24 09:50:52.292 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-24 09:50:52.293 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-24 09:50:52.293 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-24 09:50:52.294 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-24 09:50:52.294 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-24 09:50:52.295 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-24 09:50:52.296 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-24 09:50:52.296 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-24 09:50:52.297 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-24 09:50:52.297 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-24 09:50:52.297 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-24 09:50:52.298 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-24 09:50:52.298 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-24 09:50:52.299 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-24 09:50:52.299 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-24 09:50:52.300 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-24 09:50:52.300 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-24 09:50:52.301 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-24 09:50:52.301 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-24 09:50:52.302 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-24 09:50:52.302 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-24 09:50:52.303 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-07-24 09:50:52.304 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"
     ]
    }
   ],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import pickle\n",
    "\n",
    "# === Load the trained model ===\n",
    "with open(\"RandomForest_HHO_model.pkl\", \"rb\") as file:\n",
    "    model_loaded = pickle.load(file)\n",
    "\n",
    "st.set_page_config(page_title=\"Embedment Depth Prediction\", layout=\"centered\")\n",
    "\n",
    "# === Title ===\n",
    "st.title(\"Embedment Depth Prediction using Hybrid RF-HHO Model\")\n",
    "st.markdown(\"### Prediction of Embedment Depth of Sheet Pile (D)\")\n",
    "\n",
    "# === Input Fields ===\n",
    "st.subheader(\"Enter Soil Properties\")\n",
    "\n",
    "# Display labels for UI\n",
    "display_labels = {\n",
    "    'gamma1': 'γ₁ (kN/m³)',\n",
    "    'phi1': 'φ₁ (°)',\n",
    "    'gamma2': 'γ₂ (kN/m³)',\n",
    "    'C2': 'C₂ (kPa)'\n",
    "}\n",
    "\n",
    "# Mapping for model input\n",
    "feature_mapping = {\n",
    "    'gamma1': 'g1',\n",
    "    'phi1': 'phi1',\n",
    "    'gamma2': 'g2',\n",
    "    'C2': 'C2'\n",
    "}\n",
    "\n",
    "# Create input fields\n",
    "input_data = {}\n",
    "for var, label in display_labels.items():\n",
    "    input_data[feature_mapping[var]] = st.number_input(label, value=0.0, format=\"%.2f\")\n",
    "\n",
    "# === Predict Button ===\n",
    "if st.button(\"Predict\"):\n",
    "    df_input = pd.DataFrame([input_data])\n",
    "    prediction = model_loaded.predict(df_input)\n",
    "    pred_val = round(prediction[0], 3)\n",
    "    st.success(f\"Predicted Depth (D): {pred_val} m\")\n",
    "\n",
    "    # Store session state for export\n",
    "    st.session_state['latest_prediction'] = (input_data, pred_val)\n",
    "\n",
    "# === Clear Button ===\n",
    "if st.button(\"Clear\"):\n",
    "    for key in feature_mapping.values():\n",
    "        input_data[key] = 0.0\n",
    "    st.experimental_rerun()\n",
    "\n",
    "# === Export Button ===\n",
    "if 'latest_prediction' in st.session_state:\n",
    "    input_values, pred_val = st.session_state['latest_prediction']\n",
    "    df_export = pd.DataFrame([list(input_values.values()) + [pred_val]],\n",
    "                             columns=list(input_values.keys()) + ['D'])\n",
    "\n",
    "    csv = df_export.to_csv(index=False).encode('utf-8')\n",
    "    st.download_button(label=\"Download Prediction as CSV\",\n",
    "                       data=csv,\n",
    "                       file_name='prediction_output.csv',\n",
    "                       mime='text/csv')\n",
    "else:\n",
    "    st.info(\"Make a prediction to enable CSV export.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9162bc38-3ef1-4195-9b7d-385eccfb2ce0",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (3737097518.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[5], line 1\u001b[1;36m\u001b[0m\n\u001b[1;33m    streamlit run app.py\u001b[0m\n\u001b[1;37m              ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "streamlit run app.py"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cc8d0614-615f-4979-a799-0f202dccd1a2",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

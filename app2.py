{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b0afe3cb-12bc-45f0-adb4-55734f685af2",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import pickle\n",
    "import tkinter as tk\n",
    "from tkinter import messagebox, filedialog\n",
    "\n",
    "# === Load the trained model ===\n",
    "with open(\"RandomForest_HHO_model.pkl\", \"rb\") as file:\n",
    "    model_loaded = pickle.load(file)\n",
    "\n",
    "# === GUI Setup ===\n",
    "root = tk.Tk()\n",
    "root.title(\"Embedment Depth Prediction using Hybrid RF-HHO Model\")\n",
    "root.configure(bg='#e1f5fe')\n",
    "root.geometry(\"750x500\")\n",
    "\n",
    "title = tk.Label(root, text=\"Prediction of Embedment Depth of Sheet Pile (D)\",\n",
    "                 font=('Helvetica', 16, 'bold'), bg='#e1f5fe', fg='#01579b')\n",
    "title.pack(pady=20)\n",
    "\n",
    "# Input Frame\n",
    "input_frame = tk.Frame(root, bg='#e1f5fe')\n",
    "input_frame.pack(pady=10)\n",
    "\n",
    "# Display names for GUI, actual feature names for model\n",
    "display_labels = {\n",
    "    'gamma1': 'γ₁ (kN/m³)',\n",
    "    'phi1': 'φ₁ (°)',\n",
    "    'gamma2': 'γ₂ (kN/m³)',\n",
    "    'C2': 'C₂ (kPa)'\n",
    "}\n",
    "\n",
    "# Mapping GUI variable names to model input names\n",
    "feature_mapping = {\n",
    "    'gamma1': 'g1',\n",
    "    'phi1': 'phi1',\n",
    "    'gamma2': 'g2',\n",
    "    'C2': 'C2'\n",
    "}\n",
    "\n",
    "entries = {}\n",
    "\n",
    "for i, (var, label_text) in enumerate(display_labels.items()):\n",
    "    label = tk.Label(input_frame, text=label_text, font=('Helvetica', 12), bg='#e1f5fe')\n",
    "    label.grid(row=i, column=0, sticky=\"w\", padx=10, pady=5)\n",
    "    entry = tk.Entry(input_frame, width=25, font=('Helvetica', 12))\n",
    "    entry.grid(row=i, column=1, padx=10, pady=5)\n",
    "    entries[var] = entry\n",
    "\n",
    "# Output Frame\n",
    "output_frame = tk.Frame(root, bg='#e1f5fe')\n",
    "output_frame.pack(pady=20)\n",
    "\n",
    "output_label = tk.Label(output_frame, text=\"Predicted Depth (D):\", font=('Helvetica', 13, 'bold'), bg='#e1f5fe')\n",
    "output_label.grid(row=0, column=0, padx=10)\n",
    "\n",
    "output_value = tk.Label(output_frame, text=\"---\", font=('Helvetica', 13), bg='white', width=10, relief='sunken')\n",
    "output_value.grid(row=0, column=1, padx=10)\n",
    "\n",
    "# Store latest prediction\n",
    "latest_prediction = [None]\n",
    "\n",
    "# === Functions ===\n",
    "def predict():\n",
    "    try:\n",
    "        input_values = {feature_mapping[var]: float(entries[var].get()) for var in entries}\n",
    "    except ValueError:\n",
    "        messagebox.showerror(\"Invalid Input\", \"Please enter valid numeric values.\")\n",
    "        return\n",
    "\n",
    "    df_input = pd.DataFrame([input_values])\n",
    "    prediction = model_loaded.predict(df_input)\n",
    "    pred_val = round(prediction[0], 3)\n",
    "    latest_prediction[0] = (input_values, pred_val)\n",
    "    output_value.config(text=str(pred_val))\n",
    "\n",
    "def clear():\n",
    "    for entry in entries.values():\n",
    "        entry.delete(0, tk.END)\n",
    "    output_value.config(text=\"---\")\n",
    "    latest_prediction[0] = None\n",
    "\n",
    "def export_csv():\n",
    "    if latest_prediction[0] is None:\n",
    "        messagebox.showwarning(\"No Data\", \"Please make a prediction first.\")\n",
    "        return\n",
    "\n",
    "    input_values, pred_val = latest_prediction[0]\n",
    "    df = pd.DataFrame([list(input_values.values()) + [pred_val]],\n",
    "                      columns=list(input_values.keys()) + ['D'])\n",
    "\n",
    "    file_path = filedialog.asksaveasfilename(defaultextension=\".csv\", filetypes=[(\"CSV files\", \"*.csv\")])\n",
    "    if file_path:\n",
    "        df.to_csv(file_path, index=False)\n",
    "        messagebox.showinfo(\"Export Successful\", f\"Data saved to {file_path}\")\n",
    "\n",
    "# === Buttons ===\n",
    "btn_frame = tk.Frame(root, bg='#e1f5fe')\n",
    "btn_frame.pack(pady=10)\n",
    "\n",
    "def style_btn(txt, cmd):\n",
    "    return tk.Button(btn_frame, text=txt, command=cmd,\n",
    "                     font=('Helvetica', 12), bg='#ffffff', fg='#01579b',\n",
    "                     activebackground='#81d4fa', activeforeground='black',\n",
    "                     padx=15, pady=5, relief='raised', bd=2)\n",
    "\n",
    "predict_btn = style_btn(\"Predict\", predict)\n",
    "clear_btn = style_btn(\"Clear\", clear)\n",
    "export_btn = style_btn(\"Export CSV\", export_csv)\n",
    "\n",
    "predict_btn.grid(row=0, column=0, padx=10)\n",
    "clear_btn.grid(row=0, column=1, padx=10)\n",
    "export_btn.grid(row=0, column=2, padx=10)\n",
    "\n",
    "root.mainloop()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
